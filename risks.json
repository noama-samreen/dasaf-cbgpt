{
    "risks": [
        {
            "name": "No Critical Vulnerability",
            "is_critical": true,
            "prompt": "Does the codebase contain any critical vulnerabilities that could lead to fund loss or consensus manipulation? What to look for: Check for any audits to the codebase and see if they addressed/fixed any critical findings in those audits. Check the Github: Any open issues (may or may not have security tag) that look alarming Security tab → Advisories may also have potential information for security related issues. Google query for any history of the network being hacked and check to see if that issue was ever patched/audited."
        },
        {
            "name": "No Non-Critical Vulnerability",
            "is_critical": false,
            "prompt": "Are there any known non-critical vulnerabilities in the node implementation, and have past issues been patched with evidence (e.g., PRs or audits)?"
        },
        {
            "name": "No Central Authority",
            "is_critical": true,
            "prompt": "Can any central authority transfer, burn, or revert user transactions or balances?  What to look for: Understand the consensus mechanism of the network. If it's proof of stake network that implements a ⅔ BFT threshold for validators voting on the next block, make sure no single entity owns 2/3rds or more of the validators. If it's a proof of work network, make sure no single mining company/pool or entity owns more than 51% of the hash power. Other less popular consensus mechanisms include Proof of Authority, Proof of Space, Burn, etc. It's important to understand what is required for the network to reach consensus/finalize a block, and reverse engineer how that can be accomplished and taken over. This information needs to be found on the network's official validator explorer or other reliable source. Make sure that you can tell the validators are owned by different entities. ONLY if you have this information, list the top 3 (mining pools with the network hashrate of each for PoW chains OR validators by stake with their staked amount for PoS chains) for this blockchain."
        },
        {
            "name": "Limited Governance",
            "is_critical": false,
            "prompt": "Can governance arbitrarily transfer or remove user funds or revert past transactions? What to look for: We are mainly verifying 2 things: (1) What kind of proposals can governance pass? E.g. changes to codebase, chain parameters, etc. and (2) Is governance decentralized? Look in developer documentation, whitepaper, and github.  Sometimes projects may say they implement 'off-chain' governance, in which case we need to verify if it's decentralized."
        },
        {
            "name": "Censorship Resistance",
            "is_critical": false,
            "prompt": "Is any actor capable of censoring transactions or controlling their inclusion in blocks?  What to look for: Understand the consensus mechanism of the network. If it's proof of stake network that implements a ⅔ BFT threshold for validators voting on the next block, make sure no single entity owns 1/3 or more of the validators. If it's a proof of work network, make sure no single mining company/pool or entity owns more than 51% of the hash power. "
        },
        {
            "name": "Liveness Failure",
            "is_critical": false,
            "prompt": "Does the network have any single-point failure mechanisms or halting functions controlled by one actor? What to look for: Official announcements, blogs, news, Google queries for any downtime. We want to see if it was recent. If it wasn't, has it been on a consistent basis (e.g. once a month)? Some blockchain explorers will have uptime stats you can look at."
        },
        {
            "name": "Token",
            "is_critical": true,
            "prompt": "Does the project use a smart contract-based governance token (e.g., OP on Optimism) instead of a native gas token?"
        },
        {
            "name": "Cold Storage",
            "is_critical": true,
            "prompt": "Can keys be securely generated and stored offline using standard tools? What to look for: Check developer documentation Search for keywords such as 'Keys', 'Wallets', 'Cold Storage', 'signatures', etc. Check project's Github Look for any readme documentation There will be some sort of key generation process that one can look for."
        },
        {
            "name": "Custom Crypto",
            "is_critical": true,
            "prompt": "Does the protocol rely on novel or custom cryptography for critical functions like signing, consensus, or address generation?"
        },
        {
            "name": "Open Source",
            "is_critical": true,
            "prompt": "Is the node software open source, and can a binary be built from source? Provide a link to the repository. What to look for: Check to see if project has a Github or Gitlab where their node software can be viewed, downloaded, and ran. If you can't find it, check any official announcements from the project; otherwise ask the issuer."
        },
        {
            "name": "Independent Control",
            "is_critical": true,
            "prompt": "Can node functionality be remotely modified by a central authority, or is control fully local to the operator? What to look for: Check developer documentation- Look for keywords such as 'node upgrade', 'update', etc. Check the project's Github tags (next to the branch version near the top) Look into any version and see if they need to be pulled/built manually."
        },
        {
            "name": "Open Access",
            "is_critical": true,
            "prompt": "Can a node connect to the network without registration? What to look for: Look through developer documentation for node types We're mainly looking for a node type that can just access current chain state and history. This may be termed as a 'full'/ 'archival' / 'read' node. Look at Github and see if there's any documentation or readme that specifies the type of node we can run - Look at the installation instructions for the node Make sure we don't need to register or put up any stake/crypto to run it. If we have to pass a KYC process, it will fail this component."
        },
        {
            "name": "Financial Takeover",
            "is_critical": true,
            "prompt": "Is the blockchain resistant to arbitrary consensus takeover (e.g., via economic cost or validator restrictions)?\n\nFollow these steps precisely:\n\n1. Identify the consensus mechanism (Proof-of-Stake, Proof-of-Work, or other)\n\n2. Describe requirements to become a validator or equivalent participant\n\n3. Get CURRENT data (must include date and source URLs):\n   For PoS chains:\n   - Total staked amount (Ts): Get from official block explorer\n   - Token price (Av): Get from CoinGecko/CoinMarketCap (specify source)\n   For PoW chains:\n   - Total hashrate (Te): Get from official explorer/mining stats\n   - Resource cost (Rc): Get current rates from NiceHash\n   - Block time (Bt): Get from explorer\n\n4. Calculate attack cost using EXACT NUMBERS:\n\n   For Proof of Stake (PoS):\n   Step 1: Ca = Ts × (0.67/1-0.67) \n   Step 2: Ac = Ca × Av\n    For Proof of Work (PoW):\n   Step 1: Ca = Te × 0.51 (need 51% for attack)\n   Step 2: Bc = Ca × Rc × 3600 (hourly cost)\n   Step 3: Ac = Bc × 24 (daily cost)\n Required output format:\n   Current Data (as of DATE):\n   - Total staked/hashrate: X (source URL)\n   - Token price/resource cost: $Y (source URL)\n   \n   Calculations:\n   - Show each step with numbers as in examples above\n   - Final attack cost: $Z\n   \n   Result: PASS if > $5M, FAIL if ≤ $5M\n\nNote: Always show your work and include ALL current data sources with URLs and dates."
        },
        {
            "name": "Poor Entropy",
            "is_critical": false,
            "prompt": "Does the protocol use a secure, unpredictable source of randomness for system-critical functions? What to look for: In Developer documentation & whitepaper - We need to understand how the next block producer is selected. Look for any keywords such as 'random', 'block producer', 'election', etc. We need to confirm if randomness is being used elsewhere in the protocol; or at least confirm that any randomness used is coming from a safe source. Ex: Polkadot. In Github - Look for same keywords, Find the specific lines of code that are doing the block producer selection"
        },
        {
            "name": "Consensus Docs",
            "is_critical": true,
            "prompt": "Is the consensus mechanism clearly documented, including how to participate and validate?"
        },
        {
            "name": "Risk Docs",
            "is_critical": false,
            "prompt": "Does the documentation address risks and justify the protocol's resilience against bounded-resource attackers?"
        },
        {
            "name": "PII",
            "is_critical": true,
            "prompt": "Does the blockchain include features that store or register personally identifiable information (PII)?"
        },
        {
            "name": "Dev Support",
            "is_critical": false,
            "prompt": "Are multiple developers actively contributing to the codebase?"
        }
    ]
}
